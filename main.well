~include <std.well>

~var:main {

  	asm~ str: db '%s', 10, 0

  	int~ width = 1280
  	int~ height = 720
  	string~ WINDOW_NAME = 'TEST'

  	string~ init_error = 'TEST RAN INTO A INIT ERROR!'
 	string~ loop_error = 'TEST RAN INTO A LOOP ERROR!'

	int~ GL_COLOR_BUFFER_BIT = 0x00004000
	int~ GL_DEPTH_BUFFER_BIT = 0x00000100

	asm~ pFourF: dd 0.4
	asm~ zeroF: dd 0.0
	asm~ oneF: dd 1.0
	asm~ threeF: dd 3.0
	
	mut~ window = resb 1

}

~func:mloop {

        move~ [rel window], rdi
        call~ glfwWindowShouldClose
        ~if(rax != 0)
                move~ str, r8
                move~ init_error, r9
                call~ util:print
                return~ 1
        end
        jump~ loop1

}
~func:loop1 {

        // xmm0:R, xmm1: G, xmm2: B, xmm3: A
        movef~ [rel zeroF], xmm0
        movef~ [rel zeroF], xmm1
        movef~ [rel pFourF], xmm2
        movef~ [rel oneF], xmm3
	      call~ glClearColor

	      move~ GL_COLOR_BUFFER_BIT, rdi
	      call~ glClear

        move~ [rel window], rdi
	      call~ glfwSwapBuffers
        call~ glfwPollEvents
	      jump~ mloop
}

~func:init {

  	call~ glfwInit

  	~if(rax == 0)
    
    		move~ str, r8
    		move~ init_error, r9
    		call~ util:print
   		return~ 1
  
  	end

  	// glfwCreateWindow(1280, 720, WINDOW_NAME, NULL, NULL);
  	move~ 0, r8
  	move~ 0, rcx
  	move~ WINDOW_NAME, rdx
  	move~ width, rdi
  	move~ height, rsi
  	call~ glfwCreateWindow

  	~if(rax == 0)

     		move~ str, r8
     		move~ init_error, r9
     		call~ util:print
     		return~ 1

  	end

  	move~ rax, [rel window]
  	move~ [rel window], rdi
  	call~ glfwMakeContextCurrent

  	move~ 0, rdi
  	move~ 0, rsi
  	move~ width, rdx
  	move~ height, rcx
  	call~ glViewport

  	jump~ mloop

  	return~ 0

}

~func:main {

  	asm~ extern printf

  	asm~ extern glfwInit
  	asm~ extern glfwCreateWindow
  	asm~ extern glfwMakeContextCurrent
  	asm~ extern glfwWindowShouldClose
  	asm~ extern glfwPollEvents
  	asm~ extern glViewport
	asm~ extern glfwSwapBuffers
	asm~ extern glClear
	asm~ extern glClearColor

  	call~ init
  	return~ 0

}
